#!/usr/bin/env ruby

if ARGV == ['listener']
  require 'resqued/listener'
  Resqued::Listener.exec!
  exit 0
end

require 'optparse'

options = {}
daemonize = false
test = false

opts = OptionParser.new do |opts|
  opts.banner = "Usage: resqued [options] resqued-config-files..."

  opts.on '-h', '--help', 'Show this message' do
    puts opts
    exit
  end

  opts.on '-v', '--version', 'Show the version' do
    require 'resqued/version'
    puts Resqued::VERSION
    exit
  end

  opts.on '--test', 'Report which worker would start' do
    test = true
  end

  opts.on '-p', '--pidfile PIDFILE', 'Store the pid of the master process in PIDFILE' do |v|
    options[:master_pidfile] = v
  end

  opts.on '-l', '--logfile LOGFILE', 'Write output to LOGFILE instead of stdout' do |v|
    require 'resqued/logging'
    Resqued::Logging.log_file = v
  end

  opts.on '-D', '--daemonize', 'Run daemonized in the background' do
    daemonize = true
  end
end

opts.parse!
options[:config_paths] = ARGV

if options[:config_paths].size == 0
  puts opts
  exit 1
end

if test
  require 'resqued/config'
  workers = Resqued::Config.new(options[:config_paths]).build_workers
  puts "Workers defined in #{options[:config_paths].join(' ')}"
  workers.each_with_index do |worker, index|
    puts "#{index + 1}: #{worker.queues.join(',')}"
  end
else
  require 'resqued'
  Resqued::START_CTX['$0'] = $0.dup
  resqued = Resqued::Master.new(options)
  if daemonize
    require 'resqued/daemon'
    resqued = Resqued::Daemon.new(resqued)
  end
  resqued.run
end
